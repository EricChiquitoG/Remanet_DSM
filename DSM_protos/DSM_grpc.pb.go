// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: DSM.proto

package DSM_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubmissionService_CheckAvailabilty_FullMethodName = "/DSM.SubmissionService/CheckAvailabilty"
	SubmissionService_CheckInterest_FullMethodName    = "/DSM.SubmissionService/CheckInterest"
	SubmissionService_EnrollServer_FullMethodName     = "/DSM.SubmissionService/EnrollServer"
	SubmissionService_Optimize_FullMethodName         = "/DSM.SubmissionService/Optimize"
)

// SubmissionServiceClient is the client API for SubmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmissionServiceClient interface {
	CheckAvailabilty(ctx context.Context, in *Process, opts ...grpc.CallOption) (*ProcessResponse, error)
	CheckInterest(ctx context.Context, in *Purchase, opts ...grpc.CallOption) (*PurchaseResponse, error)
	EnrollServer(ctx context.Context, in *Enroll, opts ...grpc.CallOption) (*EnrollResponse, error)
	Optimize(ctx context.Context, in *OptimizationRequest, opts ...grpc.CallOption) (*OptimizationResponse, error)
}

type submissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmissionServiceClient(cc grpc.ClientConnInterface) SubmissionServiceClient {
	return &submissionServiceClient{cc}
}

func (c *submissionServiceClient) CheckAvailabilty(ctx context.Context, in *Process, opts ...grpc.CallOption) (*ProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, SubmissionService_CheckAvailabilty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionServiceClient) CheckInterest(ctx context.Context, in *Purchase, opts ...grpc.CallOption) (*PurchaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseResponse)
	err := c.cc.Invoke(ctx, SubmissionService_CheckInterest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionServiceClient) EnrollServer(ctx context.Context, in *Enroll, opts ...grpc.CallOption) (*EnrollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnrollResponse)
	err := c.cc.Invoke(ctx, SubmissionService_EnrollServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionServiceClient) Optimize(ctx context.Context, in *OptimizationRequest, opts ...grpc.CallOption) (*OptimizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OptimizationResponse)
	err := c.cc.Invoke(ctx, SubmissionService_Optimize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmissionServiceServer is the server API for SubmissionService service.
// All implementations must embed UnimplementedSubmissionServiceServer
// for forward compatibility.
type SubmissionServiceServer interface {
	CheckAvailabilty(context.Context, *Process) (*ProcessResponse, error)
	CheckInterest(context.Context, *Purchase) (*PurchaseResponse, error)
	EnrollServer(context.Context, *Enroll) (*EnrollResponse, error)
	Optimize(context.Context, *OptimizationRequest) (*OptimizationResponse, error)
	mustEmbedUnimplementedSubmissionServiceServer()
}

// UnimplementedSubmissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubmissionServiceServer struct{}

func (UnimplementedSubmissionServiceServer) CheckAvailabilty(context.Context, *Process) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAvailabilty not implemented")
}
func (UnimplementedSubmissionServiceServer) CheckInterest(context.Context, *Purchase) (*PurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckInterest not implemented")
}
func (UnimplementedSubmissionServiceServer) EnrollServer(context.Context, *Enroll) (*EnrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollServer not implemented")
}
func (UnimplementedSubmissionServiceServer) Optimize(context.Context, *OptimizationRequest) (*OptimizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Optimize not implemented")
}
func (UnimplementedSubmissionServiceServer) mustEmbedUnimplementedSubmissionServiceServer() {}
func (UnimplementedSubmissionServiceServer) testEmbeddedByValue()                           {}

// UnsafeSubmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmissionServiceServer will
// result in compilation errors.
type UnsafeSubmissionServiceServer interface {
	mustEmbedUnimplementedSubmissionServiceServer()
}

func RegisterSubmissionServiceServer(s grpc.ServiceRegistrar, srv SubmissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubmissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubmissionService_ServiceDesc, srv)
}

func _SubmissionService_CheckAvailabilty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Process)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionServiceServer).CheckAvailabilty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmissionService_CheckAvailabilty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionServiceServer).CheckAvailabilty(ctx, req.(*Process))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionService_CheckInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Purchase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionServiceServer).CheckInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmissionService_CheckInterest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionServiceServer).CheckInterest(ctx, req.(*Purchase))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionService_EnrollServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Enroll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionServiceServer).EnrollServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmissionService_EnrollServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionServiceServer).EnrollServer(ctx, req.(*Enroll))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionService_Optimize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionServiceServer).Optimize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubmissionService_Optimize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionServiceServer).Optimize(ctx, req.(*OptimizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubmissionService_ServiceDesc is the grpc.ServiceDesc for SubmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DSM.SubmissionService",
	HandlerType: (*SubmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAvailabilty",
			Handler:    _SubmissionService_CheckAvailabilty_Handler,
		},
		{
			MethodName: "CheckInterest",
			Handler:    _SubmissionService_CheckInterest_Handler,
		},
		{
			MethodName: "EnrollServer",
			Handler:    _SubmissionService_EnrollServer_Handler,
		},
		{
			MethodName: "Optimize",
			Handler:    _SubmissionService_Optimize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DSM.proto",
}
